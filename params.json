{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"dm-noisy-failures","google":"","body":"DataMapper: Noisy Failures\r\n==========================\r\n\r\n[Some have argued](http://www.drmaciver.com/2010/04/datamapper-is-inherently-broken/) that there is fundamental flaw in [DataMapper](http://datamapper.org/): that it \"considers booleans to be a superior solution to exceptions.\" That is, the library does not actively tell you what went wrong when you try to save a record and it fails.\r\n\r\nSimple Example\r\n--------------\r\n\r\nConsider this simple example:\r\n\r\n```ruby\r\nclass Person\r\n  include DataMapper::Resource\r\n\r\n  property :id,   Serial\r\n  property :name, String, :required => true\r\nend\r\n\r\np = Person.new\r\np.save # => false\r\n```\r\n\r\nCompare this to the behavior you get after requiring `dm-noisy-failures`:\r\n\r\n```ruby\r\nrequire \"dm_noisy_failures\" # or dm-noisy-failures\r\n\r\np = Person.new\r\np.save # => DataMapper::SaveFailureError: Person: Name must not be blank\r\n```\r\n\r\nThere, isn't that better?\r\n\r\nSlightly More Complex Example\r\n-----------------------------\r\n\r\nThe [DataMapper documentation](http://datamapper.org/docs/validations.html) suggests a way to do something similar to the above:\r\n\r\n```ruby\r\ndef save_record(record)\r\n  if record.save\r\n    # The record saved successfully.\r\n  else\r\n    puts \"Errors:\"\r\n    record.errors.each do |e|\r\n      puts e\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nThis works just fine for the simple example above. But what if we change things up a bit?\r\n\r\n```ruby\r\nclass Person\r\n  has n, :accounts\r\nend\r\n\r\nclass Account\r\n  include DataMapper::Resource\r\n\r\n  belongs_to :person\r\n\r\n  property :id,        Serial\r\n  property :person_id, Integer\r\n  property :name,      String, :required => true\r\nend\r\n\r\np = Person.new(:name => \"John\")\r\np.accounts << Account.new\r\nsave_record(p) # => Errors:\r\n```\r\n\r\nWhat happened? Why don't we see any errors? Because the record passed to `save_record` doesn't *have* any; it's the child record that has the errors.\r\n\r\nNow, let's try that again with `dm-noisy-failures` required:\r\n\r\n```ruby\r\nrequire \"dm_noisy_failures\"\r\n\r\np = Person.new(:name => \"John\")\r\np.accounts << Account.new\r\nsave_record(p) # => DataMapper::SaveFailureError: Account: Name must not be blank\r\n```\r\n\r\nAwesome! Right?\r\n\r\nMethods Affected\r\n----------------\r\n\r\nThis gem aliases the default DataMapper methods `save`, `update`, `create`, and `destroy` with `?` equivalents (`save?`, etc.) which return true or false. The one exception is `create?`, which returns either a resource object or nil.\r\n\r\nAll four methods are then *replaced* with variations that throw exceptions with informative error messages.\r\n\r\nThis means that for each operation, there are three options to choose from:\r\n\r\n- `save?` (the old default): return true or false\r\n- `save` (the new default): throw exceptions on failure\r\n- `save!` (already part of DataMapper): save without validating\r\n\r\nRequirements\r\n------------\r\n\r\nThis library's only dependency is DataMapper itself. Note that you should require `dm-noisy-failures` before defining any of your models.\r\n","tagline":"Noisy (and descriptive) failures for DataMapper"}